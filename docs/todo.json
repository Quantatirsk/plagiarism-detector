{
  "project": "FastAPI向量嵌入文档检测系统",
  "version": "1.0.0",
  "principles": [
    "简单性: 能简单就不要复杂",
    "清晰性: 代码即文档，命名即注释",
    "实用性: 先跑起来，再优化",
    "单一职责: 一个函数只做一件事",
    "最小惊讶: 行为符合直觉"
  ],
  "phases": [
    {
      "id": "phase-1",
      "name": "环境准备与项目初始化",
      "description": "搭建开发环境，初始化项目结构",
      "tasks": [
        {
          "id": "task-1.1",
          "title": "创建项目结构",
          "description": "按照规范创建所有必要的目录和__init__.py文件",
          "priority": "critical",
          "status": "pending",
          "dependencies": [],
          "estimated_hours": 0.5,
          "files": [
            "app/",
            "app/api/v1/",
            "app/core/",
            "app/models/",
            "app/services/",
            "app/repositories/",
            "app/utils/",
            "tests/"
          ],
          "validation": "目录结构完整，所有__init__.py文件就位"
        },
        {
          "id": "task-1.2",
          "title": "安装依赖",
          "description": "创建虚拟环境并安装所有依赖包",
          "priority": "critical",
          "status": "pending",
          "dependencies": ["task-1.1"],
          "estimated_hours": 0.5,
          "files": ["requirements.txt"],
          "validation": "pip list显示所有依赖已安装，无版本冲突"
        },
        {
          "id": "task-1.3",
          "title": "配置环境变量",
          "description": "创建.env文件，配置OpenAI API密钥和Milvus本地模式",
          "priority": "critical",
          "status": "pending",
          "dependencies": ["task-1.2"],
          "estimated_hours": 0.5,
          "files": [".env", ".env.example"],
          "validation": "环境变量可正确读取，MILVUS_MODE=local"
        },
        {
          "id": "task-1.4",
          "title": "初始化Git仓库",
          "description": "初始化Git，添加.gitignore，确保.env不被提交",
          "priority": "high",
          "status": "pending",
          "dependencies": ["task-1.3"],
          "estimated_hours": 0.25,
          "files": [".gitignore"],
          "validation": "git status显示.env被忽略"
        }
      ]
    },
    {
      "id": "phase-2",
      "name": "核心配置与基础设施",
      "description": "实现配置管理、错误处理和日志系统",
      "tasks": [
        {
          "id": "task-2.1",
          "title": "实现配置管理",
          "description": "创建Settings类，支持本地/生产模式切换",
          "priority": "critical",
          "status": "pending",
          "dependencies": ["task-1.3"],
          "estimated_hours": 1,
          "files": ["app/core/config.py"],
          "validation": "get_settings()返回正确配置，MilvusMode枚举工作正常"
        },
        {
          "id": "task-2.2",
          "title": "实现错误处理",
          "description": "定义异常类和全局错误处理器",
          "priority": "high",
          "status": "pending",
          "dependencies": ["task-2.1"],
          "estimated_hours": 1,
          "files": ["app/core/errors.py", "app/core/middleware.py"],
          "validation": "异常能被正确捕获并返回适当的HTTP状态码"
        },
        {
          "id": "task-2.3",
          "title": "配置结构化日志",
          "description": "使用structlog配置JSON格式日志输出",
          "priority": "medium",
          "status": "pending",
          "dependencies": ["task-2.2"],
          "estimated_hours": 0.5,
          "files": ["app/core/logging.py"],
          "validation": "日志以JSON格式输出，包含时间戳和上下文"
        }
      ]
    },
    {
      "id": "phase-3",
      "name": "数据模型定义",
      "description": "定义所有Pydantic模型",
      "tasks": [
        {
          "id": "task-3.1",
          "title": "创建文档模型",
          "description": "定义Document相关的所有模型类",
          "priority": "high",
          "status": "pending",
          "dependencies": ["task-2.1"],
          "estimated_hours": 1,
          "files": ["app/models/document.py"],
          "validation": "模型验证工作，字段类型和约束正确"
        },
        {
          "id": "task-3.2",
          "title": "创建检测模型",
          "description": "定义DetectionRequest和DetectionResult模型",
          "priority": "high",
          "status": "pending",
          "dependencies": ["task-3.1"],
          "estimated_hours": 1,
          "files": ["app/models/detection.py"],
          "validation": "请求验证和响应序列化正常工作"
        },
        {
          "id": "task-3.3",
          "title": "创建通用模型",
          "description": "定义共享的枚举和基础模型",
          "priority": "medium",
          "status": "pending",
          "dependencies": ["task-3.2"],
          "estimated_hours": 0.5,
          "files": ["app/models/common.py"],
          "validation": "ChunkType枚举可用，基础模型可继承"
        }
      ]
    },
    {
      "id": "phase-4",
      "name": "服务层实现",
      "description": "实现核心业务逻辑服务",
      "tasks": [
        {
          "id": "task-4.1",
          "title": "实现文本处理服务",
          "description": "文本分割、清理等基础功能",
          "priority": "high",
          "status": "pending",
          "dependencies": ["task-3.3"],
          "estimated_hours": 2,
          "files": ["app/services/text_processor.py"],
          "validation": "段落分割、句子分割、滑动窗口功能正常"
        },
        {
          "id": "task-4.2",
          "title": "实现OpenAI嵌入服务",
          "description": "调用OpenAI API生成文本嵌入，支持批处理",
          "priority": "critical",
          "status": "pending",
          "dependencies": ["task-4.1"],
          "estimated_hours": 3,
          "files": ["app/services/embedding.py"],
          "validation": "单文本和批量嵌入工作，重试机制正常，降级处理可用"
        },
        {
          "id": "task-4.3",
          "title": "实现Milvus存储服务",
          "description": "支持本地和服务器两种模式的向量存储",
          "priority": "critical",
          "status": "pending",
          "dependencies": ["task-4.2"],
          "estimated_hours": 4,
          "files": ["app/services/storage.py"],
          "validation": "本地模式可创建milvus_demo.db，插入和搜索功能正常"
        },
        {
          "id": "task-4.4",
          "title": "实现检测服务",
          "description": "核心相似度检测逻辑，支持段落和句子级检测",
          "priority": "critical",
          "status": "pending",
          "dependencies": ["task-4.3"],
          "estimated_hours": 4,
          "files": ["app/services/detection.py"],
          "validation": "段落检测准确，句子级检测可选，去重功能正常"
        },
        {
          "id": "task-4.5",
          "title": "实现文档服务",
          "description": "文档上传、处理和索引管理",
          "priority": "high",
          "status": "pending",
          "dependencies": ["task-4.4"],
          "estimated_hours": 3,
          "files": ["app/services/document.py"],
          "validation": "文档可上传，分块索引正常，后台处理工作"
        },
        {
          "id": "task-4.6",
          "title": "实现健康检查服务",
          "description": "应用健康状态和就绪状态检查",
          "priority": "medium",
          "status": "pending",
          "dependencies": ["task-4.3"],
          "estimated_hours": 1,
          "files": ["app/services/health.py"],
          "validation": "健康检查返回正确状态，Milvus连接状态可检测"
        }
      ]
    },
    {
      "id": "phase-5",
      "name": "数据访问层实现",
      "description": "实现Redis缓存和其他仓库模式",
      "tasks": [
        {
          "id": "task-5.1",
          "title": "实现Redis缓存",
          "description": "异步Redis操作，支持JSON序列化",
          "priority": "medium",
          "status": "pending",
          "dependencies": ["task-4.4"],
          "estimated_hours": 2,
          "files": ["app/repositories/redis.py"],
          "validation": "缓存读写正常，TTL设置有效，异常处理完善"
        },
        {
          "id": "task-5.2",
          "title": "实现基础仓库",
          "description": "仓库模式基类，如需要",
          "priority": "low",
          "status": "pending",
          "dependencies": ["task-5.1"],
          "estimated_hours": 1,
          "files": ["app/repositories/base.py"],
          "validation": "基类可继承，接口定义清晰"
        }
      ]
    },
    {
      "id": "phase-6",
      "name": "API接口开发",
      "description": "实现FastAPI路由和端点",
      "tasks": [
        {
          "id": "task-6.1",
          "title": "实现依赖注入",
          "description": "服务单例管理和依赖组装",
          "priority": "high",
          "status": "pending",
          "dependencies": ["task-4.6", "task-5.1"],
          "estimated_hours": 1,
          "files": ["app/api/deps.py"],
          "validation": "服务单例正确创建，依赖注入工作"
        },
        {
          "id": "task-6.2",
          "title": "实现检测API",
          "description": "POST /check端点，支持三种检测模式",
          "priority": "critical",
          "status": "pending",
          "dependencies": ["task-6.1"],
          "estimated_hours": 2,
          "files": ["app/api/v1/detection.py"],
          "validation": "API可调用，参数验证正常，响应格式正确"
        },
        {
          "id": "task-6.3",
          "title": "实现文档API",
          "description": "文档上传端点，支持多种格式",
          "priority": "high",
          "status": "pending",
          "dependencies": ["task-6.1"],
          "estimated_hours": 2,
          "files": ["app/api/v1/documents.py"],
          "validation": "文件上传成功，后台索引触发，错误处理完善"
        },
        {
          "id": "task-6.4",
          "title": "实现健康检查API",
          "description": "健康和就绪检查端点",
          "priority": "medium",
          "status": "pending",
          "dependencies": ["task-6.1"],
          "estimated_hours": 1,
          "files": ["app/api/v1/health.py"],
          "validation": "端点返回200状态码，服务状态准确"
        },
        {
          "id": "task-6.5",
          "title": "实现主应用入口",
          "description": "FastAPI应用配置、中间件、路由注册",
          "priority": "critical",
          "status": "pending",
          "dependencies": ["task-6.2", "task-6.3", "task-6.4"],
          "estimated_hours": 2,
          "files": ["app/main.py"],
          "validation": "应用启动成功，所有路由可访问，Swagger文档生成"
        }
      ]
    },
    {
      "id": "phase-7",
      "name": "工具函数与优化",
      "description": "实现辅助工具和性能优化",
      "tasks": [
        {
          "id": "task-7.1",
          "title": "实现批处理工具",
          "description": "通用批处理函数，支持并发控制",
          "priority": "medium",
          "status": "pending",
          "dependencies": ["task-6.5"],
          "estimated_hours": 1.5,
          "files": ["app/utils/batch.py"],
          "validation": "批处理提高性能，并发限制有效"
        },
        {
          "id": "task-7.2",
          "title": "实现连接池管理",
          "description": "HTTP客户端连接池",
          "priority": "low",
          "status": "pending",
          "dependencies": ["task-7.1"],
          "estimated_hours": 1,
          "files": ["app/core/connections.py"],
          "validation": "连接复用正常，资源不泄露"
        },
        {
          "id": "task-7.3",
          "title": "实现监控指标",
          "description": "Prometheus指标收集",
          "priority": "low",
          "status": "pending",
          "dependencies": ["task-6.5"],
          "estimated_hours": 1.5,
          "files": ["app/core/monitoring.py"],
          "validation": "指标端点可访问，数据正确收集"
        }
      ]
    },
    {
      "id": "phase-8",
      "name": "测试开发",
      "description": "编写单元测试和集成测试",
      "tasks": [
        {
          "id": "task-8.1",
          "title": "测试文本处理服务",
          "description": "TextProcessor所有方法的单元测试",
          "priority": "high",
          "status": "pending",
          "dependencies": ["task-4.1"],
          "estimated_hours": 1,
          "files": ["tests/test_text_processor.py"],
          "validation": "所有测试通过，覆盖率>80%"
        },
        {
          "id": "task-8.2",
          "title": "测试嵌入服务",
          "description": "Mock OpenAI API，测试嵌入服务",
          "priority": "high",
          "status": "pending",
          "dependencies": ["task-4.2"],
          "estimated_hours": 1.5,
          "files": ["tests/test_embedding.py"],
          "validation": "Mock工作正常，重试机制测试通过"
        },
        {
          "id": "task-8.3",
          "title": "测试检测API",
          "description": "检测端点的集成测试",
          "priority": "critical",
          "status": "pending",
          "dependencies": ["task-6.2"],
          "estimated_hours": 2,
          "files": ["tests/test_detection.py"],
          "validation": "API响应正确，错误场景处理正常"
        },
        {
          "id": "task-8.4",
          "title": "测试Milvus本地模式",
          "description": "验证本地文件存储功能",
          "priority": "high",
          "status": "pending",
          "dependencies": ["task-4.3"],
          "estimated_hours": 2,
          "files": ["tests/test_storage.py"],
          "validation": "数据持久化正常，重启后可恢复"
        }
      ]
    },
    {
      "id": "phase-9",
      "name": "集成与验证",
      "description": "端到端测试和系统验证",
      "tasks": [
        {
          "id": "task-9.1",
          "title": "本地端到端测试",
          "description": "完整流程测试：上传文档->索引->检测",
          "priority": "critical",
          "status": "pending",
          "dependencies": ["task-8.3", "task-8.4"],
          "estimated_hours": 3,
          "files": ["tests/test_e2e.py"],
          "validation": "完整流程无错误，检测准确率>85%"
        },
        {
          "id": "task-9.2",
          "title": "性能测试",
          "description": "响应时间和并发处理能力测试",
          "priority": "medium",
          "status": "pending",
          "dependencies": ["task-9.1"],
          "estimated_hours": 2,
          "files": ["tests/test_performance.py"],
          "validation": "响应时间<100ms，支持100并发请求"
        },
        {
          "id": "task-9.3",
          "title": "创建示例数据集",
          "description": "准备测试文档和预期结果",
          "priority": "medium",
          "status": "pending",
          "dependencies": ["task-9.1"],
          "estimated_hours": 2,
          "files": ["tests/fixtures/"],
          "validation": "有代表性的测试数据，覆盖各种场景"
        }
      ]
    },
    {
      "id": "phase-10",
      "name": "部署准备",
      "description": "准备生产部署",
      "tasks": [
        {
          "id": "task-10.1",
          "title": "创建Docker配置",
          "description": "Dockerfile和docker-compose配置",
          "priority": "medium",
          "status": "pending",
          "dependencies": ["task-9.1"],
          "estimated_hours": 2,
          "files": ["Dockerfile", "docker-compose.yml"],
          "validation": "容器构建成功，服务可访问"
        },
        {
          "id": "task-10.2",
          "title": "生产模式测试",
          "description": "切换到server模式，连接真实Milvus",
          "priority": "high",
          "status": "pending",
          "dependencies": ["task-10.1"],
          "estimated_hours": 3,
          "files": [".env.production"],
          "validation": "服务器模式工作，数据迁移成功"
        },
        {
          "id": "task-10.3",
          "title": "编写部署文档",
          "description": "部署指南和操作手册",
          "priority": "medium",
          "status": "pending",
          "dependencies": ["task-10.2"],
          "estimated_hours": 2,
          "files": ["docs/deployment.md", "README.md"],
          "validation": "文档清晰完整，新人可按文档部署"
        },
        {
          "id": "task-10.4",
          "title": "CI/CD配置",
          "description": "GitHub Actions或其他CI工具配置",
          "priority": "low",
          "status": "pending",
          "dependencies": ["task-10.3"],
          "estimated_hours": 2,
          "files": [".github/workflows/"],
          "validation": "自动化测试和部署流程正常"
        }
      ]
    }
  ],
  "milestones": [
    {
      "name": "MVP可运行",
      "description": "本地模式下基础功能可用",
      "target_date": "2024-12-20",
      "required_phases": ["phase-1", "phase-2", "phase-3", "phase-4", "phase-6"],
      "success_criteria": [
        "FastAPI应用可启动",
        "本地Milvus存储工作",
        "检测API可调用",
        "准确率>75%"
      ]
    },
    {
      "name": "功能完整",
      "description": "所有功能实现并测试",
      "target_date": "2024-12-25",
      "required_phases": ["phase-5", "phase-7", "phase-8", "phase-9"],
      "success_criteria": [
        "所有API端点工作",
        "测试覆盖率>80%",
        "性能达标",
        "文档完整"
      ]
    },
    {
      "name": "生产就绪",
      "description": "可部署到生产环境",
      "target_date": "2024-12-31",
      "required_phases": ["phase-10"],
      "success_criteria": [
        "Docker部署成功",
        "生产模式验证通过",
        "监控和日志完善",
        "部署文档完整"
      ]
    }
  ],
  "risk_management": [
    {
      "risk": "OpenAI API限流",
      "impact": "high",
      "mitigation": "实现指数退避重试，批量请求优化，考虑本地模型备选"
    },
    {
      "risk": "Milvus本地模式性能不足",
      "impact": "medium",
      "mitigation": "优化索引参数，实现分页，必要时提前迁移到服务器模式"
    },
    {
      "risk": "内存占用过高",
      "impact": "medium",
      "mitigation": "实现流式处理，控制批次大小，添加内存监控"
    },
    {
      "risk": "检测准确率不达标",
      "impact": "high",
      "mitigation": "优化文本分割策略，调整相似度阈值，增加句子级检测"
    }
  ],
  "success_metrics": {
    "performance": {
      "response_time": "<100ms for 95th percentile",
      "throughput": ">100 requests/second",
      "concurrent_users": ">100"
    },
    "quality": {
      "accuracy": ">85% detection accuracy",
      "false_positive_rate": "<5%",
      "false_negative_rate": "<10%"
    },
    "reliability": {
      "uptime": ">99.9%",
      "error_rate": "<0.1%",
      "recovery_time": "<5 minutes"
    }
  },
  "notes": [
    "遵循Linus原则：先让代码工作，再考虑优化",
    "使用本地Milvus模式进行开发，降低环境复杂度",
    "每完成一个phase进行集成测试",
    "保持代码简洁，避免过度设计",
    "优先实现核心功能，辅助功能后续迭代"
  ]
}